@page "/edit-product/{productId}"
@inject IProductService ProductService
@inject NavigationManager NavigationManager

<h3>Editar Producto</h3>

@if (product == null)
{
    <p><em>Cargando producto...</em></p>
}
else
{
    <EditForm Model="product" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Nombre:</label>
            <InputText @bind-Value="product.NombreP" class="form-control" />
        </div>

        <div class="form-group">
            <label>Categoría:</label>
            <InputText @bind-Value="product.Categoria" class="form-control" />
        </div>

        <div class="form-group">
            <label>Proveedor:</label>
            <InputText @bind-Value="product.Proveedor" class="form-control" />
        </div>

        <div class="form-group">
            <label>Precio:</label>
            <InputNumber @bind-Value="product.Precio" class="form-control" />
        </div>

        <div class="form-group">
            <label>Stock:</label>
            <InputNumber @bind-Value="product.Stock" class="form-control" />
        </div>

        <div class="form-group">
            <label>Descripción:</label>
            <InputTextArea @bind-Value="product.Descripcion" class="form-control" />
        </div>

        <div class="form-group">
            <label>Imagen (URL):</label>
            <InputText @bind-Value="product.Imagen" class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary m-1">Guardar cambios</button>
        <button type="button" class="btn btn-secondary m-1" @onclick="Cancel">Cancelar</button>
    </EditForm>
}

@code {
    [Parameter] public string productId { get; set; }
    private Product product;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            product = await ProductService.GetProductDetails(productId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar el producto: {ex.Message}");
            product = null;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await ProductService.SaveProduct(product);
            NavigationManager.NavigateTo("/home");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar cambios: {ex.Message}");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/home");
    }
}
