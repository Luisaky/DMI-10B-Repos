@page "/home"
@inject IProductService ProductService
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager

<h1 class="text-center my-4">Inventario de Productos</h1>

<div class="d-flex justify-content-between mb-3">
    <a href="/add-product" class="btn btn-primary">Agregar Producto</a>
    <p class="text-muted">Mostrando @products.Count() productos</p>
</div>

@if (products == null || !products.Any())
{
    <p><em>No se encontraron productos.</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover text-center">
            <thead style="background-color: #4b0082; color: white;">
                <!-- Morado más oscuro -->
                <tr>
                    <th>Nombre</th>
                    <th>Categoría</th>
                    <th>Precio</th>
                    <th>Stock</th>
                    <th>Descripción</th>
                    <th>Imagen</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody style="border-top: none;">
                <!-- Solo rayas horizontales -->
                @foreach (var prod in PaginatedProducts)
                {
                    <tr>
                        <td>@prod.NombreP</td>
                        <td>@prod.Categoria</td>
                        <td>@prod.Precio.ToString("C")</td>
                        <td>@prod.Stock</td>
                        <td>@prod.Descripcion</td>
                        <td>
                            <img src="@prod.Imagen" alt="Imagen" class="img-fluid" style="max-width: 100px; height: auto;" />
                        </td>
                        <td class="d-flex justify-content-center">
                            <button class="btn btn-outline-light btn-sm me-2" style="background-color: #6f42c1; color: white;" @onclick="() => EditProduct(prod.Id)">
                                <i class="bi bi-pencil-square"></i> Editar
                            </button>
                            <button class="btn btn-outline-light btn-sm" style="background-color: #d9534f; color: white;" @onclick="() => DeleteProduct(prod.Id)">
                                <i class="bi bi-trash"></i> Eliminar
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <nav aria-label="Paginación de productos">
        <ul class="pagination justify-content-center">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Anterior</button>
            </li>
            @for (int i = 1; i <= totalPages; i++)
            {
                <li class="page-item @(currentPage == i ? "active" : "")">
                    <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                </li>
            }
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Siguiente</button>
            </li>
        </ul>
    </nav>
}
@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}

@code {
    private IEnumerable<Product> products = Enumerable.Empty<Product>();
    private IEnumerable<Product> PaginatedProducts = Enumerable.Empty<Product>();
    private int currentPage = 1;
    private int itemsPerPage = 6;
    private int totalPages = 0;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        PaginateProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            products = await ProductService.GetAllProducts();
            totalPages = (int)Math.Ceiling(products.Count() / (double)itemsPerPage);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al obtener productos: {ex.Message}";
        }
    }

    private void PaginateProducts()
    {
        PaginatedProducts = products
            .Skip((currentPage - 1) * itemsPerPage)
            .Take(itemsPerPage);
    }

    private void ChangePage(int newPage)
    {
        if (newPage < 1 || newPage > totalPages)
        {
            return;
        }
        currentPage = newPage;
        PaginateProducts();
    }

    private void EditProduct(string productId)
    {
        NavigationManager.NavigateTo($"/edit-product/{productId}");
    }

    private async Task DeleteProduct(string productId)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de que deseas eliminar este producto?");
        if (confirm)
        {
            try
            {
                await ProductService.DeleteProduct(productId);
                await LoadProducts();
                PaginateProducts();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error al eliminar producto: {ex.Message}";
            }
        }
    }
}
